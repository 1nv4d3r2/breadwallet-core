/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ContractDelete.proto */

#ifndef PROTOBUF_C_ContractDelete_2eproto__INCLUDED
#define PROTOBUF_C_ContractDelete_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"

typedef struct _Proto__ContractDeleteTransactionBody Proto__ContractDeleteTransactionBody;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  PROTO__CONTRACT_DELETE_TRANSACTION_BODY__OBTAINERS__NOT_SET = 0,
  PROTO__CONTRACT_DELETE_TRANSACTION_BODY__OBTAINERS_TRANSFER_ACCOUNT_ID = 2,
  PROTO__CONTRACT_DELETE_TRANSACTION_BODY__OBTAINERS_TRANSFER_CONTRACT_ID = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO__CONTRACT_DELETE_TRANSACTION_BODY__OBTAINERS)
} Proto__ContractDeleteTransactionBody__ObtainersCase;

/*
 * Modify a smart contract instance to have the given parameter values. Any null field is ignored (left unchanged). If only the contractInstanceExpirationTime is being modified, then no signature is needed on this transaction other than for the account paying for the transaction itself. But if any of the other fields are being modified, then it must be signed by the adminKey. The use of adminKey is not currently supported in this API, but in the future will be implemented to allow these fields to be modified, and also to make modifications to the state of the instance. If the contract is created with no admin key, then none of the fields can be changed that need an admin signature, and therefore no admin key can ever be added. So if there is no admin key, then things like the bytecode are immutable. But if there is an admin key, then they can be changed. For example, the admin key might be a threshold key, which requires 3 of 5 binding arbitration judges to agree before the bytecode can be changed. This can be used to add flexibility to the mangement of smart contract behavior. But this is optional. If the smart contract is created without an admin key, then such a key can never be added, and its bytecode will be immutable. 
 */
struct  _Proto__ContractDeleteTransactionBody
{
  ProtobufCMessage base;
  /*
   * The Contract ID instance to delete (this can't be changed)
   */
  Proto__ContractID *contractid;
  Proto__ContractDeleteTransactionBody__ObtainersCase obtainers_case;
  union {
    /*
     * The account ID which will receive all remaining hbars
     */
    Proto__AccountID *transferaccountid;
    /*
     * The contract ID which will receive all remaining hbars
     */
    Proto__ContractID *transfercontractid;
  };
};
#define PROTO__CONTRACT_DELETE_TRANSACTION_BODY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__contract_delete_transaction_body__descriptor) \
    , NULL, PROTO__CONTRACT_DELETE_TRANSACTION_BODY__OBTAINERS__NOT_SET, {0} }


/* Proto__ContractDeleteTransactionBody methods */
void   proto__contract_delete_transaction_body__init
                     (Proto__ContractDeleteTransactionBody         *message);
size_t proto__contract_delete_transaction_body__get_packed_size
                     (const Proto__ContractDeleteTransactionBody   *message);
size_t proto__contract_delete_transaction_body__pack
                     (const Proto__ContractDeleteTransactionBody   *message,
                      uint8_t             *out);
size_t proto__contract_delete_transaction_body__pack_to_buffer
                     (const Proto__ContractDeleteTransactionBody   *message,
                      ProtobufCBuffer     *buffer);
Proto__ContractDeleteTransactionBody *
       proto__contract_delete_transaction_body__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__contract_delete_transaction_body__free_unpacked
                     (Proto__ContractDeleteTransactionBody *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__ContractDeleteTransactionBody_Closure)
                 (const Proto__ContractDeleteTransactionBody *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__contract_delete_transaction_body__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ContractDelete_2eproto__INCLUDED */

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: CryptoGetClaim.proto */

#ifndef PROTOBUF_C_CryptoGetClaim_2eproto__INCLUDED
#define PROTOBUF_C_CryptoGetClaim_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"
#include "QueryHeader.pb-c.h"
#include "ResponseHeader.pb-c.h"
#include "CryptoAddClaim.pb-c.h"

typedef struct _Proto__CryptoGetClaimQuery Proto__CryptoGetClaimQuery;
typedef struct _Proto__CryptoGetClaimResponse Proto__CryptoGetClaimResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * Get a single claim attached to an account, or return null if it does not exist. 
 */
struct  _Proto__CryptoGetClaimQuery
{
  ProtobufCMessage base;
  /*
   * Standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither).
   */
  Proto__QueryHeader *header;
  /*
   * The account ID to which the claim was attached
   */
  Proto__AccountID *accountid;
  /*
   * The hash of the claim
   */
  ProtobufCBinaryData hash;
};
#define PROTO__CRYPTO_GET_CLAIM_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__crypto_get_claim_query__descriptor) \
    , NULL, NULL, {0,NULL} }


/*
 * Response when the client sends the node CryptoGetClaimQuery. If the claim exists, there can be a state proof for that single claim. If the claim doesn't exist, then the state proof must be obtained for the account as a whole, which lists all the attached claims, which then proves that any claim not on the list must not exist. 
 */
struct  _Proto__CryptoGetClaimResponse
{
  ProtobufCMessage base;
  /*
   *Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
   */
  Proto__ResponseHeader *header;
  /*
   * The claim (account, hash, keys), or null if there is no Claim with the given hash attached to the given account
   */
  Proto__Claim *claim;
};
#define PROTO__CRYPTO_GET_CLAIM_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__crypto_get_claim_response__descriptor) \
    , NULL, NULL }


/* Proto__CryptoGetClaimQuery methods */
void   proto__crypto_get_claim_query__init
                     (Proto__CryptoGetClaimQuery         *message);
size_t proto__crypto_get_claim_query__get_packed_size
                     (const Proto__CryptoGetClaimQuery   *message);
size_t proto__crypto_get_claim_query__pack
                     (const Proto__CryptoGetClaimQuery   *message,
                      uint8_t             *out);
size_t proto__crypto_get_claim_query__pack_to_buffer
                     (const Proto__CryptoGetClaimQuery   *message,
                      ProtobufCBuffer     *buffer);
Proto__CryptoGetClaimQuery *
       proto__crypto_get_claim_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__crypto_get_claim_query__free_unpacked
                     (Proto__CryptoGetClaimQuery *message,
                      ProtobufCAllocator *allocator);
/* Proto__CryptoGetClaimResponse methods */
void   proto__crypto_get_claim_response__init
                     (Proto__CryptoGetClaimResponse         *message);
size_t proto__crypto_get_claim_response__get_packed_size
                     (const Proto__CryptoGetClaimResponse   *message);
size_t proto__crypto_get_claim_response__pack
                     (const Proto__CryptoGetClaimResponse   *message,
                      uint8_t             *out);
size_t proto__crypto_get_claim_response__pack_to_buffer
                     (const Proto__CryptoGetClaimResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__CryptoGetClaimResponse *
       proto__crypto_get_claim_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__crypto_get_claim_response__free_unpacked
                     (Proto__CryptoGetClaimResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__CryptoGetClaimQuery_Closure)
                 (const Proto__CryptoGetClaimQuery *message,
                  void *closure_data);
typedef void (*Proto__CryptoGetClaimResponse_Closure)
                 (const Proto__CryptoGetClaimResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__crypto_get_claim_query__descriptor;
extern const ProtobufCMessageDescriptor proto__crypto_get_claim_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_CryptoGetClaim_2eproto__INCLUDED */

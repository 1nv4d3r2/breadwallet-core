/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ContractUpdate.proto */

#ifndef PROTOBUF_C_ContractUpdate_2eproto__INCLUDED
#define PROTOBUF_C_ContractUpdate_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"
#include "Duration.pb-c.h"
#include "Timestamp.pb-c.h"

typedef struct _Proto__ContractUpdateTransactionBody Proto__ContractUpdateTransactionBody;


/* --- enums --- */


/* --- messages --- */

/*
 * Modify a smart contract instance to have the given parameter values. Any null field is ignored (left unchanged). If only the contractInstanceExpirationTime is being modified, then no signature is needed on this transaction other than for the account paying for the transaction itself. But if any of the other fields are being modified, then it must be signed by the adminKey. The use of adminKey is not currently supported in this API, but in the future will be implemented to allow these fields to be modified, and also to make modifications to the state of the instance. If the contract is created with no admin key, then none of the fields can be changed that need an admin signature, and therefore no admin key can ever be added. So if there is no admin key, then things like the bytecode are immutable. But if there is an admin key, then they can be changed. For example, the admin key might be a threshold key, which requires 3 of 5 binding arbitration judges to agree before the bytecode can be changed. This can be used to add flexibility to the management of smart contract behavior. But this is optional. If the smart contract is created without an admin key, then such a key can never be added, and its bytecode will be immutable. 
 */
struct  _Proto__ContractUpdateTransactionBody
{
  ProtobufCMessage base;
  /*
   * The Contract ID instance to update (this can't be changed)
   */
  Proto__ContractID *contractid;
  /*
   * Extend the expiration of the instance and its account to this time (no effect if it already is this time or later)
   */
  Proto__Timestamp *expirationtime;
  /*
   * The state of the instance can be modified arbitrarily if this key signs a transaction to modify it. If this is null, then such modifications are not possible, and there is no administrator that can override the normal operation of this smart contract instance.
   */
  Proto__Key *adminkey;
  /*
   * ID of the account to which this account is proxy staked. If proxyAccountID is null, or is an invalid account, or is an account that isn't a node, then this account is automatically proxy staked to a node chosen by the network, but without earning payments. If the proxyAccountID account refuses to accept proxy staking , or if it is not currently running a node, then it will behave as if proxyAccountID was null.
   */
  Proto__AccountID *proxyaccountid;
  /*
   * The instance will charge its account every this many seconds to renew for this long
   */
  Proto__Duration *autorenewperiod;
  /*
   * The file ID of file containing the smart contract byte code. A copy will be made and held by the contract instance, and have the same expiration time as the instance. The file is referenced one of two ways:
   */
  Proto__FileID *fileid;
  /*
   * The memo associated with the contract (max 100 bytes)
   */
  char *memo;
};
#define PROTO__CONTRACT_UPDATE_TRANSACTION_BODY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__contract_update_transaction_body__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, (char *)protobuf_c_empty_string }


/* Proto__ContractUpdateTransactionBody methods */
void   proto__contract_update_transaction_body__init
                     (Proto__ContractUpdateTransactionBody         *message);
size_t proto__contract_update_transaction_body__get_packed_size
                     (const Proto__ContractUpdateTransactionBody   *message);
size_t proto__contract_update_transaction_body__pack
                     (const Proto__ContractUpdateTransactionBody   *message,
                      uint8_t             *out);
size_t proto__contract_update_transaction_body__pack_to_buffer
                     (const Proto__ContractUpdateTransactionBody   *message,
                      ProtobufCBuffer     *buffer);
Proto__ContractUpdateTransactionBody *
       proto__contract_update_transaction_body__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__contract_update_transaction_body__free_unpacked
                     (Proto__ContractUpdateTransactionBody *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__ContractUpdateTransactionBody_Closure)
                 (const Proto__ContractUpdateTransactionBody *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__contract_update_transaction_body__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ContractUpdate_2eproto__INCLUDED */
